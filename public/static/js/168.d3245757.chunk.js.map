{"version":3,"file":"static/js/168.d3245757.chunk.js","mappings":"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","sources":["cmps/ingPreview.jsx","cmps/IngList.jsx"],"sourcesContent":["import { forwardRef, useEffect, useMemo, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nimport { getAmountToScale, selectText, sleep } from \"../services/utilService\";\nimport { showErrorMsg } from \"../services/eventBusService\";\n\n\nexport function IngPreview({\n    ingredient,\n    ingToScale,\n    isFixedRatio,\n    onChangeRecipeData,\n    ingredientsLength,\n    handleIngChange,\n    removeIngredient,\n    providedRef,\n    dragHandleProp,\n    dragProp,\n    numOfDishes,\n    handleRecipeAmounts,\n    amountToScaleFixed\n}) {\n\n    const [className, setClassName] = useState('');\n\n    const moreRef = (el) => {\n        console.log('moreREf el:', el);\n\n    }\n\n\n    const onRemoveIngredient = async () => {\n        if (isFixedRatio) return\n        if (ingredientsLength === 1) {\n            showErrorMsg({ txt: 'Sorry, for now you need to have at least 1 ingredient' })\n            return\n        }\n\n        setClassName('equal')\n        await sleep(350)\n        removeIngredient(ingredient.id)\n    }\n\n    // const mergeRefs = (...refs) => {\n    //     const filteredRefs = refs.filter(Boolean);\n    //     if (!filteredRefs.length) return null;\n    //     if (filteredRefs.length === 0) return filteredRefs[0];\n    //     return inst => {\n    //         for (const ref of filteredRefs) {\n    //             if (typeof ref === 'function') {\n    //                 ref(inst);\n    //             } else if (ref) {\n    //                 ref.current = inst;\n    //             }\n    //         }\n    //     };\n    // };\n\n\n    const onHandleIngChange = (type) => {\n\n        if (!isFixedRatio) return (ev) => handleIngChange(ev, ingredient)\n        if (type === 'amount') {\n            return (ev) => handleRecipeAmounts(ev, ingredient)\n        }\n\n        return () => { }\n    }\n\n    const onChangeRecipeDataWrap = () => {\n        if (ingredient.units === 'units') {\n            showErrorMsg({ txt: \"Can't set 'Units' as a main relative quantity\" })\n            return\n        }\n        onChangeRecipeData('ingToScaleId', ingredient.id)\n    }\n\n\n    const handleKeyPress = (ev) => {\n\n        // if (ev.which === 13 || ev.charCode === 13 || ev.code==='Enter' || ev.nativeEvent.keyCode===13) {\n        if (ev.nativeEvent?.keyCode === 13 || ev.keyCode === 13 || ev.which === 13 || ev.charCode === 13 || ev.code === 'Enter') {\n            // if (ev.keyCode === 13) {\n            ev.target.blur()\n            window.getSelection().empty()\n            ev.stopPropagation()\n        }\n\n    }\n\n\n\n    const dishesAmount = useMemo(() => {\n        numOfDishes ||= 1\n        if (!isFixedRatio) return (ingredient.amount * numOfDishes) % 1 === 0 ? (ingredient.amount * numOfDishes) : (ingredient.amount * numOfDishes).toFixed(2)\n        const res = amountToScaleFixed / ingToScale.amount * ingredient.amount\n        return res % 1 === 0 ? res : res.toFixed(2)\n    }, [numOfDishes, amountToScaleFixed])\n\n\n    const ingToScaleClass = ingredient.id === ingToScale?.id ? 'chosen' : ''\n    /*TEST START*/\n    let amountToScale = (ingToScale) ? getAmountToScale(ingredient, ingToScale) : ''\n\n    /*TEST END*/\n\n    /*ORIGINAL START*/\n    // const amountToScale = (ingToScale && ingredient.units !== 'units') ? getAmountToScale(ingredient, ingToScale) : '-'\n    /*ORIGINAL END*/\n    var unitsLength = ingredient.units.length + 3\n\n    const isAmountEditable = !isFixedRatio || ingredient.id === ingToScale.id\n    const notAllowedClass = isFixedRatio ? 'not-allowed' : ''\n\n    return (\n\n\n        <article ref={providedRef} {...dragProp} {...dragHandleProp} className={`ing-preview ${className}`}>\n            <span tabIndex=\"-1\" className={`remove-icon ${notAllowedClass}`} ><FontAwesomeIcon onClick={onRemoveIngredient} icon={faTrash} /></span>\n\n\n            <section className=\"editable ing-name\" >\n                <span tabIndex=\"0\" className={notAllowedClass} onKeyPress={handleKeyPress} onFocus={selectText} title={ingredient.name} data-name=\"name\" onBlur={onHandleIngChange()} contentEditable={!isFixedRatio} suppressContentEditableWarning={true}>{ingredient.name}</span>\n            </section>\n            <section className=\"amount-unit\">\n                <span tabIndex=\"0\" onKeyPress={handleKeyPress} onFocus={selectText} inputMode=\"numeric\" data-name=\"amount\" onBlur={onHandleIngChange('amount')} className={`editable ${!isAmountEditable && 'not-allowed'}`} contentEditable={isAmountEditable} suppressContentEditableWarning={true}>{dishesAmount}</span>\n                <select disabled={isFixedRatio} className={notAllowedClass} tabIndex=\"0\" style={{ width: `${unitsLength}ch` }} onChange={onHandleIngChange()} value={ingredient.units} name=\"units\" id=\"units\">\n                {/* <select disabled={isFixedRatio} className={notAllowedClass} tabIndex=\"0\"  onChange={onHandleIngChange()} value={ingredient.units} name=\"units\" id=\"units\"> */}\n                    <option value=\"g\">g</option>\n                    <option value=\"Kg\">Kg</option>\n                    <option value=\"mL\">mL</option>\n                    <option value=\"L\">L</option>\n                    <option value=\"oz\">oz</option>\n                    <option value=\"cup\">Cup</option>\n                    <option value=\"tableSpoon\">Table spoon</option>\n                    <option value=\"teaSpoon\">Tea spoon</option>\n                    <option value=\"units\">Units</option>\n                </select>\n            </section>\n            <p title={amountToScale} onClick={onChangeRecipeDataWrap} className={`${ingToScaleClass} ${notAllowedClass}`}>{amountToScale || '-'}</p>\n        </article>\n    );\n}","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useMemo, useState } from \"react\";\n\nimport { getIdxEquality } from \"../services/utilService\";\nimport { IngPreview } from \"./ingPreview\";\nimport { useRef } from 'react';\nconst grid = 8;\n\nexport default function IngList({\n    ingredients,\n    ingToScale,\n    onChangeRecipeData,\n    handleIngChange,\n    handleEditable,\n    addIngredient,\n    removeIngredient,\n    ingToRemoveIdx,\n    onReOrderIngs,\n    numOfDishes,\n    isFixedRatio,\n    handleRecipeAmounts,\n    amountToScaleFixed\n}) {\n\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n\n        userSelect: \"none\",\n        padding: grid * 2,\n        margin: `0 0 ${grid}px 0`,\n\n        // change background colour if dragging\n        background: isDragging ? \"lightgreen\" : \"'grey'\",\n\n        ...draggableStyle\n    });\n\n    const [isDrag, setIsDrag] = useState(false);\n\n\n\n    const getListStyle = isDraggingOver => ({\n        // background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n        // padding: grid,\n        // width: 250\n    });\n\n    const onDragStart = () => {\n        setIsDrag(true)\n\n    }\n    const onDragEnd = (res) => {\n        setIsDrag(false)\n        onReOrderIngs(res)\n    }\n\n    // const onDragEnd = (result) => {\n    //     onReOrderIngs(result)\n    // }\n\n\n\n    return (\n        <>\n\n            <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"droppable\">\n                    {(provided, snapshot) => (\n                        <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                        >\n\n                            <section className='ing-list'>\n                                {ingredients.map((ingredient, idx) =>\n                                    // <>\n                                    <Draggable key={ingredient.id} draggableId={ingredient.id} index={idx}>\n                                        {(provided) => {\n                                            return (\n                                                <IngPreview\n                                                    providedRef={provided.innerRef}\n                                                    dragProp={provided.draggableProps}\n                                                    dragHandleProp={provided.dragHandleProps}\n                                                    removeIngredient={removeIngredient}\n                                                    handleEditable={handleEditable}\n                                                    handleIngChange={handleIngChange}\n                                                    key={ingredient.id}\n                                                    ingredient={ingredient}\n                                                    ingToScale={ingToScale}\n                                                    isFixedRatio={isFixedRatio}\n                                                    onChangeRecipeData={onChangeRecipeData}\n                                                    numOfDishes={numOfDishes}\n                                                    isRemovedClass={getIdxEquality(idx, ingToRemoveIdx)}\n                                                    ingredientsLength={ingredients.length}\n                                                    handleRecipeAmounts={handleRecipeAmounts}\n                                                    amountToScaleFixed={amountToScaleFixed}\n                                                />\n                                            )\n                                        }}\n                                    </Draggable>\n                                )}\n                                {(provided.placeholder)}\n                                {<button className=\"add-btn\" onClick={addIngredient} ><FontAwesomeIcon icon={faPlus} /></button>}\n                                {/* {(!snapshot.isDraggingOver||true) && <button style={{top: `${snapshot.isDraggingOver?}`}} onClick={addIngredient} className=\"add-btn\"><FontAwesomeIcon icon={faPlus} /></button>} */}\n\n                            </section>\n                        </div>\n\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </>\n    );\n}\n"],"names":["IngPreview","ingredient","ingToScale","isFixedRatio","onChangeRecipeData","ingredientsLength","handleIngChange","removeIngredient","providedRef","dragHandleProp","dragProp","numOfDishes","handleRecipeAmounts","amountToScaleFixed","useState","className","setClassName","onRemoveIngredient","showErrorMsg","txt","sleep","id","onHandleIngChange","type","ev","handleKeyPress","nativeEvent","keyCode","which","charCode","code","target","blur","window","getSelection","empty","stopPropagation","dishesAmount","useMemo","amount","toFixed","res","ingToScaleClass","amountToScale","getAmountToScale","unitsLength","units","length","isAmountEditable","notAllowedClass","ref","tabIndex","onClick","icon","faTrash","onKeyPress","onFocus","selectText","title","name","onBlur","contentEditable","suppressContentEditableWarning","inputMode","disabled","style","width","onChange","value","IngList","ingredients","handleEditable","addIngredient","ingToRemoveIdx","onReOrderIngs","setIsDrag","onDragStart","onDragEnd","droppableId","provided","snapshot","droppableProps","innerRef","isDraggingOver","map","idx","draggableId","index","draggableProps","dragHandleProps","isRemovedClass","getIdxEquality","placeholder","faPlus"],"sourceRoot":""}